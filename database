CREATE DATABASE hris_db;
USE hris_db;

-- Employee Table (Created first without Department_ID and Manager_ID)
CREATE TABLE Employee (
    Emp_ID INT PRIMARY KEY AUTO_INCREMENT,
    First_Name VARCHAR(50) NOT NULL,
    Last_Name VARCHAR(50) NOT NULL,
    DOB DATE,
    Gender ENUM('Male', 'Female', 'Other'),
    Address TEXT,
    Contact_No VARCHAR(15),
    Email VARCHAR(100) UNIQUE,
    Marital_Status ENUM('Single', 'Married', 'Divorced', 'Widowed'),
    Qualification VARCHAR(100),
    Experience INT,
    Blood_Type VARCHAR(5),
    Insurance VARCHAR(50),
    Joining_Date DATE,
    Leave_Balance INT DEFAULT 0
);

-- Department Table (Created next)
CREATE TABLE Department (
    Dept_ID INT PRIMARY KEY AUTO_INCREMENT,
    Dept_Name VARCHAR(100) NOT NULL,
    Location VARCHAR(100),
    Manager_ID INT NULL,
    FOREIGN KEY (Manager_ID) REFERENCES Employee(Emp_ID) ON DELETE SET NULL
);

-- Alter Employee Table to add Department_ID and Manager_ID after Department exists
ALTER TABLE Employee
ADD COLUMN Department_ID INT NULL,
ADD COLUMN Manager_ID INT NULL,
ADD FOREIGN KEY (Department_ID) REFERENCES Department(Dept_ID) ON DELETE SET NULL,
ADD FOREIGN KEY (Manager_ID) REFERENCES Employee(Emp_ID) ON DELETE SET NULL;

-- Payroll Table
CREATE TABLE Payroll (
    Payroll_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Basic_Salary DECIMAL(10,2) NOT NULL,
    Allowance DECIMAL(10,2),
    Deduction DECIMAL(10,2),
    Net_Salary DECIMAL(10,2) NOT NULL,
    Payment_Date DATE,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE
);

-- Attendance Table
CREATE TABLE Attendance (
    Attendance_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Date DATE NOT NULL,
    Status ENUM('Present', 'Absent', 'Leave', 'Half-Day') NOT NULL,
    Check_In TIME,
    Check_Out TIME,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE
);

-- Leave Management Table
CREATE TABLE LeaveManagement (
    Leave_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Leave_Type ENUM('Sick', 'Vacation', 'Maternity', 'Paternity', 'Other') NOT NULL,
    Start_Date DATE NOT NULL,
    End_Date DATE NOT NULL,
    Status ENUM('Approved', 'Pending', 'Rejected') NOT NULL,
    Reason TEXT,
    Applied_On DATE NOT NULL,
    Approved_By INT NULL,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE,
    FOREIGN KEY (Approved_By) REFERENCES Employee(Emp_ID) ON DELETE SET NULL
);

-- Job Profile Table
CREATE TABLE JobProfile (
    Job_ID INT PRIMARY KEY AUTO_INCREMENT,
    Job_Title VARCHAR(100) NOT NULL,
    Salary_Range DECIMAL(10,2) NOT NULL,
    Job_Description TEXT
);

-- Employee Job Mapping Table
CREATE TABLE EmployeeJob (
    EmpJob_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Job_ID INT,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE,
    FOREIGN KEY (Job_ID) REFERENCES JobProfile(Job_ID) ON DELETE CASCADE
);

-- User Login Table
CREATE TABLE UserLogin (
    User_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Username VARCHAR(50) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Role ENUM('Admin', 'Employee', 'HR', 'Manager') NOT NULL,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE
);

-- Report Table
CREATE TABLE Report (
    Report_ID INT PRIMARY KEY AUTO_INCREMENT,
    Report_Type ENUM('Payroll', 'Attendance', 'Leave', 'Employee', 'Department') NOT NULL,
    Generated_By INT,
    Generated_On DATETIME DEFAULT CURRENT_TIMESTAMP,
    Report_Details TEXT,
    FOREIGN KEY (Generated_By) REFERENCES UserLogin(User_ID) ON DELETE SET NULL
);

-- Employee Experience Table
CREATE TABLE EmployeeExperience (
    Experience_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Strengths TEXT,
    Recommendations TEXT,
    Performance_Rating INT,
    Complaints TEXT,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE
);

-- Calendar Table
CREATE TABLE Calendar (
    Calendar_ID INT PRIMARY KEY AUTO_INCREMENT,
    Emp_ID INT,
    Emp_Name VARCHAR(100),
    Job_ID INT,
    Leave_Date DATE NOT NULL,
    FOREIGN KEY (Emp_ID) REFERENCES Employee(Emp_ID) ON DELETE CASCADE,
    FOREIGN KEY (Job_ID) REFERENCES JobProfile(Job_ID) ON DELETE CASCADE
);

-- Show tables
SHOW TABLES;
